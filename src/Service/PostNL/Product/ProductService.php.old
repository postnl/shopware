<?php

namespace PostNL\Shipments\Service\PostNL\Product;

use PostNL\Shipments\Defaults;
use PostNL\Shipments\Entity\Product\ProductCollection;
use PostNL\Shipments\Entity\Product\ProductDefinition;
use PostNL\Shipments\Entity\Product\ProductEntity;
use PostNL\Shipments\Service\PostNL\Delivery\DeliveryType;
use PostNL\Shipments\Service\PostNL\Delivery\Zone\Zone;
use PostNL\Shipments\Struct\ProductFlagStruct;
use Psr\Log\LoggerInterface;
use Shopware\Core\Framework\Context;
use Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryInterface;
use Shopware\Core\Framework\DataAbstractionLayer\Search\Criteria;
use Shopware\Core\Framework\DataAbstractionLayer\Search\Filter\EqualsFilter;

class ProductService
{
    /**
     * @var EntityRepositoryInterface
     */
    protected $productRepository;

    /**
     * @var LoggerInterface
     */
    protected $logger;

    public function __construct(
        EntityRepositoryInterface $productRepository,
        LoggerInterface           $logger
    )
    {
        $this->productRepository = $productRepository;
        $this->logger = $logger;
    }



    public function getProductForConfiguration(
        string  $sourceZone,
        string  $destinationZone,
        string  $deliveryType,
        array   $flags,
        Context $context
    ): ProductEntity
    {
        $this->logger->debug("Selecting PostNL product", [
            'sourceZone' => $sourceZone,
            'destinationZone' => $destinationZone,
            'deliveryType' => $deliveryType,
            'flags' => $flags,
        ]);

        $requiredFlags = $this->requiredFlags($destinationZone, $deliveryType);

        foreach (ProductDefinition::ALL_FLAGS as $flag) {
            $isInFlags = in_array($flag, array_keys($flags));
            $isRequired = in_array($flag, $requiredFlags);

            if ($isInFlags && $isRequired) {
                continue;
            }

            if (!$isInFlags && $isRequired) {
                $flags[$flag] = false;
                continue;
            }

//            $flags[$flag] = null;
        }

        $products = $this->getProductsForConfiguration($sourceZone, $destinationZone, $deliveryType, $flags, $context);

        if ($products->count() === 1) {
            return $products->first();
        }

        throw new \Exception("Could not select product");
    }


    /**
     * @param string $sourceZone
     * @param string $destinationZone
     * @param string $deliveryType
     * @param array $flags
     * @param Context $context
     * @return ProductFlagStruct[]
     * @throws \Exception
     */
    public function getFlags(
        string  $sourceZone,
        string  $destinationZone,
        string  $deliveryType,
        array   $flags,
        Context $context
    ): array
    {
        $this->logger->debug("Get available product options", [
            'sourceZone' => $sourceZone,
            'destinationZone' => $destinationZone,
            'deliveryType' => $deliveryType,
            'options' => $flags,
        ]);

        $requiredFlags = $this->requiredFlags($destinationZone, $deliveryType);

        if (empty($requiredFlags)) {
            return [];
        }

        $availableProducts = $this->getProductsForConfiguration($sourceZone, $destinationZone, $deliveryType, $flags, $context);

        $structs = [];

        /**
         * An option should be:
         * - visible
         *  - if it is required.
         *
         * - disabled
         *  - if it is not in $options and,
         *  - if there is only one possible value to select.
         *
         * - selected
         *  - if it is in $options, and the option value equates to true, or
         *  - if the option is disabled, and the only available value equates to true, or
         *  - if when none of the above, when the default value equates to true.
         */


        foreach (ProductDefinition::ALL_FLAGS as $flag) {
            $flagValuesInAvailableProducts = $availableProducts->reduceToProperty($flag);

            $shouldBeVisible = in_array($flag, $requiredFlags);
            $shouldBeDisabled = count($flagValuesInAvailableProducts) == 1;
            $shouldBeSelected = $shouldBeDisabled && $flagValuesInAvailableProducts[0];

            $isInFlags = array_key_exists($flag, $flags);
            $isSelected = $isInFlags && $flags[$flag];
            $isDisabled = !$isInFlags && $shouldBeDisabled;

            $structs[$flag] = new ProductFlagStruct(
                $flag,
                $shouldBeVisible,
                $isDisabled,
                $isSelected || $shouldBeSelected
            );
        }

        return $structs;
    }
}
